name: iOS ‚Ä¢ Capacitor (Manual Signing on macOS runner)

on:
  workflow_dispatch:

env:
  BUNDLE_ID: com.balu.aegispulse
  XCODE_WORKSPACE: ios/App/App.xcworkspace
  XCODE_SCHEME: App
  APPLE_TEAM_ID: 4ZB476DJS4

jobs:
  build-ios:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ‚úÖ Use Xcode 16 (iOS 18 SDK)
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.0"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Tooling (CocoaPods)
        run: |
          xcodebuild -version
          sudo gem install cocoapods -N || true

      - name: Install deps & sync iOS
        run: |
          npm ci
          npx cap sync ios

      - name: Decode signing assets (robust)
        shell: bash
        env:
          P12_B64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
          MP_B64:  ${{ secrets.IOS_MOBILEPROVISION_BASE64 }}
        run: |
          set -euo pipefail
          decflag="--decode"
          if ! echo Zg== | base64 --decode >/dev/null 2>&1; then
            if echo Zg== | base64 -d >/dev/null 2>&1; then decflag="-d";
            elif echo Zg== | base64 -D >/dev/null 2>&1; then decflag="-D";
            else echo "No usable base64 decoder"; exit 2; fi
          fi
          echo "$P12_B64" | base64 $decflag > cert.p12
          echo "$MP_B64"  | base64 $decflag > profile.mobileprovision
          echo "cert.p12 bytes: $(wc -c < cert.p12)"
          echo "profile.mobileprovision bytes: $(wc -c < profile.mobileprovision)"
          shasum -a 256 cert.p12 || openssl dgst -sha256 cert.p12

      - name: Create keychain & import certificate (PEMSEQ + fallback)
        shell: bash
        env:
          CERT_PW: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          set -euo pipefail
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -u build.keychain
          security list-keychains -s build.keychain login.keychain

          # Verify P12
          openssl pkcs12 -in cert.p12 -passin env:CERT_PW -info -noout

          # Try direct P12 import; if it fails, import PEMs
          if ! security import cert.p12 -k build.keychain -P "$CERT_PW" -T /usr/bin/codesign; then
            openssl pkcs12 -in cert.p12 -passin env:CERT_PW -nodes -out bundle.pem
            if ! security import bundle.pem -k build.keychain -f pemseq -A -T /usr/bin/codesign; then
              awk '/BEGIN .*PRIVATE KEY/,/END .*PRIVATE KEY/' bundle.pem > key.pem
              awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/'       bundle.pem > certs.pem
              openssl pkcs8 -topk8 -nocrypt -in key.pem -out key-pkcs8.der -outform DER
              security import key-pkcs8.der -k build.keychain -f pkcs8 -t priv -T /usr/bin/codesign -A
              security import certs.pem    -k build.keychain -f x509  -T /usr/bin/codesign
            fi
          fi

          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          echo "Installed identities:"; security find-identity -v -p codesigning build.keychain || true

      - name: Install provisioning profile
        shell: bash
        env:
          PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          /usr/bin/security cms -D -i profile.mobileprovision > profile.plist
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          echo "PROFILE_UUID=$UUID" >> "$GITHUB_ENV"
          echo "Profile UUID: $UUID  Name: $PROFILE_NAME"

      - name: Build archive (no signing)
        shell: bash
        run: |
          xcodebuild -workspace "$XCODE_WORKSPACE" -scheme "$XCODE_SCHEME" \
            -configuration Release -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -archivePath "$PWD/build/App.xcarchive" \
            CODE_SIGNING_ALLOWED=NO \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            clean archive

      - name: Embed provisioning profile into archive
        shell: bash
        run: |
          APP_PATH="$PWD/build/App.xcarchive/Products/Applications/${XCODE_SCHEME}.app"
          cp "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision" \
             "$APP_PATH/embedded.mobileprovision"
          ls -l "$APP_PATH/embedded.mobileprovision"

      - name: Manual sign & package IPA (fix collisions ‚Üí sign ‚Üí zip)
        shell: bash
        run: |
          set -euo pipefail
          APP_PATH="$PWD/build/App.xcarchive/Products/Applications/${XCODE_SCHEME}.app"
          DIST_ID="Apple Distribution: Balakrishna Mamidala (${APPLE_TEAM_ID})"

          # Build entitlements from embedded profile
          /usr/bin/security cms -D -i "$APP_PATH/embedded.mobileprovision" > emb.plist
          /usr/libexec/PlistBuddy -x -c 'Print :Entitlements' emb.plist > entitlements.plist
          echo "Entitlements:"; /usr/libexec/PlistBuddy -c 'Print' entitlements.plist || true

          MAIN_BID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$APP_PATH/Info.plist")
          echo "Main bundle id: $MAIN_BID"

          # üîß Fix CFBundleIdentifier collisions in nested bundles (frameworks/bundles/apps/appex)
          while IFS= read -r p; do
            [ -f "$p/Info.plist" ] || continue
            BID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$p/Info.plist" 2>/dev/null || echo "")
            [ -n "$BID" ] || continue
            if [[ "$p" != "$APP_PATH" && "$BID" == "$MAIN_BID" ]]; then
              SAFE_NAME=$(basename "$p" | tr -cd 'A-Za-z0-9._-')
              NEW_BID="${MAIN_BID}.${SAFE_NAME}"
              echo "‚ö†Ô∏è  Collision in: $p  (had $BID)  ‚Üí  setting CFBundleIdentifier=$NEW_BID"
              /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $NEW_BID" "$p/Info.plist" || true
            fi
          done < <(find "$APP_PATH" \( -name "*.appex" -o -name "*.framework" -o -name "*.bundle" -o -name "*.app" \) -type d)

          # Re-sign nested frameworks / dylibs
          if [ -d "$APP_PATH/Frameworks" ]; then
            find "$APP_PATH/Frameworks" -type f -name "*.dylib" -print0 | xargs -0 -I{} codesign --force --options runtime --timestamp --keychain build.keychain -s "$DIST_ID" "{}"
            find "$APP_PATH/Frameworks" -type d -name "*.framework" -maxdepth 1 -print0 | xargs -0 -I{} codesign --force --options runtime --timestamp --keychain build.keychain -s "$DIST_ID" "{}"
          fi

          # Re-sign app extensions
          if [ -d "$APP_PATH/PlugIns" ]; then
            find "$APP_PATH/PlugIns" -type d -name "*.appex" -maxdepth 1 -print0 | \
              xargs -0 -I{} codesign --force --options runtime --timestamp --keychain build.keychain -s "$DIST_ID" --entitlements entitlements.plist "{}"
          fi

          # Re-sign main app last
          codesign --force --options runtime --timestamp --keychain build.keychain -s "$DIST_ID" --entitlements entitlements.plist "$APP_PATH"
          codesign --verify --deep --strict "$APP_PATH"
          codesign -dv "$APP_PATH" || true

          # ‚úÖ Package IPA with Payload at root
          rm -rf Payload build/export/App.ipa
          mkdir -p Payload build/export
          cp -R "$APP_PATH" "Payload/${XCODE_SCHEME}.app"
          /usr/bin/ditto -c -k --sequesterRsrc --keepParent Payload build/export/App.ipa

          # sanity check
          unzip -l build/export/App.ipa | sed -n '1,60p'
          echo "IPA at: build/export/App.ipa"

      - name: Upload to TestFlight
        shell: bash
        env:
          ASC_API_KEY_ID:        ${{ secrets.ASC_API_KEY_ID }}
          ASC_API_ISSUER_ID:     ${{ secrets.ASC_API_ISSUER_ID }}
          ASC_API_KEY_P8_BASE64: ${{ secrets.ASC_API_KEY_P8_BASE64 }}
        run: |
          set -euo pipefail
          sudo gem install fastlane -N
          echo "$ASC_API_KEY_P8_BASE64" | base64 -D > AuthKey.p8 2>/dev/null || echo "$ASC_API_KEY_P8_BASE64" | base64 --decode > AuthKey.p8
          KEY_ESCAPED=$(awk '{printf "%s\\n",$0}' AuthKey.p8)
          cat > api_key.json <<JSON
          { "key_id":"$ASC_API_KEY_ID", "issuer_id":"$ASC_API_ISSUER_ID", "key":"$KEY_ESCAPED", "in_house":false }
          JSON
          fastlane pilot upload --api_key_path api_key.json --ipa "$PWD/build/export/App.ipa" -a "$BUNDLE_ID"

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipa-and-logs
          path: |
            build/export/*.ipa
            build/App.xcarchive
            entitlements.plist
            emb.plist
