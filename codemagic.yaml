workflows:
  ios_capacitor_appstore:
    name: iOS • Capacitor → App Store (Validate keys)
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      groups:
        - appstore_credentials          # contains all ASC vars + CERTIFICATE_PRIVATE_KEY + APPLE_TEAM_ID
      vars:
        # ---- EDIT THESE IF NEEDED ----
        BUNDLE_ID: "com.balu.aegispulse"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        # --------------------------------
      node: 20
      xcode: 15

    scripts:
      - name: Tool versions
        script: |
          set -e
          xcodebuild -version
          node -v || true
          app-store-connect --version || true

      - name: Validate App Store Connect vars (no secrets printed)
        script: |
          set -euo pipefail
          fail(){ echo "❌ $1"; exit 1; }

          # Presence
          [ -n "${APP_STORE_CONNECT_PRIVATE_KEY:-}" ]    || fail "APP_STORE_CONNECT_PRIVATE_KEY is empty"
          [ -n "${APP_STORE_CONNECT_KEY_IDENTIFIER:-}" ] || fail "APP_STORE_CONNECT_KEY_IDENTIFIER is empty"
          [ -n "${APP_STORE_CONNECT_ISSUER_ID:-}" ]      || fail "APP_STORE_CONNECT_ISSUER_ID is empty"
          [ -n "${CERTIFICATE_PRIVATE_KEY:-}" ]          || fail "CERTIFICATE_PRIVATE_KEY is empty"
          [ -n "${APPLE_TEAM_ID:-}" ]                    || fail "APPLE_TEAM_ID is empty"
          [ -n "${BUNDLE_ID:-}" ]                        || fail "BUNDLE_ID is empty"

          # Normalize CRLF and save to temp
          printf "%s" "$APP_STORE_CONNECT_PRIVATE_KEY" | tr -d '\r' > /tmp/asc_api_key.p8
          printf "%s" "$CERTIFICATE_PRIVATE_KEY"      | tr -d '\r' > /tmp/cert_key_any.pem

          # Check ASC .p8 headers (safe: prints only header lines)
          first_asc="$(head -n1 /tmp/asc_api_key.p8 || true)"
          last_asc="$(tail -n1 /tmp/asc_api_key.p8 || true)"
          echo "ASC key header: $first_asc"
          echo "ASC key footer: $last_asc"
          grep -q "BEGIN PRIVATE KEY" <<<"$first_asc" || fail "APP_STORE_CONNECT_PRIVATE_KEY must start with '-----BEGIN PRIVATE KEY-----'"
          grep -q "END PRIVATE KEY"   <<<"$last_asc"  || fail "APP_STORE_CONNECT_PRIVATE_KEY seems truncated"

          # Prepare CERTIFICATE_PRIVATE_KEY as PKCS#1 RSA
          first_cert="$(head -n1 /tmp/cert_key_any.pem || true)"
          last_cert="$(tail -n1 /tmp/cert_key_any.pem || true)"
          echo "Cert key header: $first_cert"
          echo "Cert key footer: $last_cert"

          if grep -q "BEGIN RSA PRIVATE KEY" <<<"$first_cert"; then
            cp /tmp/cert_key_any.pem /tmp/cert_key.pem
          elif grep -q "BEGIN PRIVATE KEY" <<<"$first_cert"; then
            # Convert PKCS#8 -> PKCS#1
            openssl pkey -in /tmp/cert_key_any.pem -out /tmp/cert_key.pem >/dev/null 2>&1 || fail "Failed converting CERTIFICATE_PRIVATE_KEY to RSA/PKCS#1"
          elif grep -q "BEGIN OPENSSH PRIVATE KEY" <<<"$first_cert"; then
            fail "CERTIFICATE_PRIVATE_KEY is OpenSSH format. Generate a PEM RSA key (e.g., 'openssl genrsa -out key.pem 2048')."
          else
            fail "CERTIFICATE_PRIVATE_KEY has unexpected header"
          fi

          # Validate RSA
          openssl rsa -in /tmp/cert_key.pem -check -noout || fail "Invalid RSA key in CERTIFICATE_PRIVATE_KEY"

          # Re-export normalized values for next steps
          export APP_STORE_CONNECT_PRIVATE_KEY="$(cat /tmp/asc_api_key.p8)"
          export CERTIFICATE_PRIVATE_KEY="$(cat /tmp/cert_key.pem)"
          envman add --key APP_STORE_CONNECT_PRIVATE_KEY --value "$APP_STORE_CONNECT_PRIVATE_KEY"
          envman add --key CERTIFICATE_PRIVATE_KEY --value "$CERTIFICATE_PRIVATE_KEY"

      - name: Install JS deps & sync Capacitor
        script: |
          set -e
          npm ci
          npx cap sync ios

      - name: Fetch/create signing files (Automatic)
        script: |
          set -e
          keychain initialize
          # Create/fetch Apple Distribution cert + profile
          app-store-connect fetch-signing-files \
            --type IOS_APP_STORE \
            --bundle-id "$BUNDLE_ID" \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --api-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --certificate-key "$CERTIFICATE_PRIVATE_KEY"
          keychain add-certificates
          xcode-project use-profiles

      - name: Build IPA
        script: |
          set -e
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME" \
            --archive-method app-store

    artifacts:
      - $CM_BUILD_DIR/IPA/*.ipa
      - $CM_BUILD_DIR/**/Build/**/*.log
      - $CM_BUILD_DIR/ios_logs/*.log

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: false
