workflows:
  ios_capacitor_appstore:
    name: "iOS • Capacitor → App Store"
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      groups:
        - appstore_credentials   # MUST include: APP_STORE_CONNECT_PRIVATE_KEY or APP_STORE_CONNECT_API_KEY, APP_STORE_CONNECT_KEY_IDENTIFIER or APP_STORE_CONNECT_KEY_ID, APP_STORE_CONNECT_ISSUER_ID, APPLE_TEAM_ID
      vars:
        BUNDLE_ID: "com.balu.aegispulse"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
      node: 20
      xcode: 15.4

    cache:
      cache_paths:
        - ~/.npm
        - ~/Library/Caches/CocoaPods

    scripts:
      - name: Install Node deps
        script: |
          npm ci

      - name: Build web assets
        script: |
          npm run build || npm run build:prod || true
          [ -d www ] || mkdir -p www

      - name: Capacitor sync (installs pods)
        script: |
          npx cap sync ios

      - name: Set build number
        script: |
          cd ios/App
          agvtool new-version -all "$BUILD_NUMBER"
          cd -

      # --- Diagnostics to ensure your env group is correct ---
      - name: Sanity check App Store Connect env
        script: |
          for var in APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_KEY_ID APP_STORE_CONNECT_PRIVATE_KEY APP_STORE_CONNECT_API_KEY APP_STORE_CONNECT_ISSUER_ID APPLE_TEAM_ID; do
            if [ -n "${!var:-}" ]; then
              echo "✅ $var is set"
            else
              echo "❌ $var is MISSING"
            fi
          done

      # --- Provisioning: fetch/create certs & profiles via App Store Connect API ---
      - name: Provisioning (create/fetch signing files)
        script: |
          set -e
          keychain initialize

          echo "Codemagic app-store-connect CLI version:"
          app-store-connect --version || true

          # Normalize names across variants
          if [ -n "${APP_STORE_CONNECT_KEY_ID:-}" ] && [ -z "${APP_STORE_CONNECT_KEY_IDENTIFIER:-}" ]; then
            export APP_STORE_CONNECT_KEY_IDENTIFIER="$APP_STORE_CONNECT_KEY_ID"
          fi
          if [ -n "${APP_STORE_CONNECT_API_KEY:-}" ] && [ -z "${APP_STORE_CONNECT_PRIVATE_KEY:-}" ]; then
            export APP_STORE_CONNECT_PRIVATE_KEY="$APP_STORE_CONNECT_API_KEY"
          fi

          # Required
          : "${APP_STORE_CONNECT_ISSUER_ID:?Missing APP_STORE_CONNECT_ISSUER_ID}"
          : "${APP_STORE_CONNECT_KEY_IDENTIFIER:?Missing APP_STORE_CONNECT_KEY_IDENTIFIER or APP_STORE_CONNECT_KEY_ID}"
          : "${APP_STORE_CONNECT_PRIVATE_KEY:?Missing APP_STORE_CONNECT_PRIVATE_KEY or APP_STORE_CONNECT_API_KEY}"

          # Export the exact envs that ASC CLI 0.60.2 reads
          export APP_STORE_CONNECT_ISSUER_ID
          export APP_STORE_CONNECT_KEY_IDENTIFIER
          export APP_STORE_CONNECT_PRIVATE_KEY

          echo "Fetching/creating signing files for bundle id: $BUNDLE_ID"
          # NOTE: 0.60.2 expects the bundle id as a positional arg + auth from env.
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create

          # Install the downloaded certs/profiles
          keychain add-certificates

          echo "Using certificate identity: ${CM_CERTIFICATE_IDENTITY:-<missing>}"
          echo "Using provisioning profile: ${CM_PROVISIONING_PROFILE:-<missing>}"
          if [ -z "$CM_CERTIFICATE_IDENTITY" ] || [ -z "$CM_PROVISIONING_PROFILE" ]; then
            echo "❌ Missing signing assets after fetch. Verify credentials & that the app ($BUNDLE_ID) exists under this team."
            exit 1
          fi

      # --- Archive with MANUAL signing using installed assets ---
      - name: Xcode archive
        script: |
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -archivePath "$CM_BUILD_DIR/ios_archive.xcarchive" \
            -destination "generic/platform=iOS" \
            clean archive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="$CM_CERTIFICATE_IDENTITY" \
            PROVISIONING_PROFILE_SPECIFIER="$CM_PROVISIONING_PROFILE" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID"

      - name: Export IPA (App Store)
        script: |
          cat > exportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>uploadSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
          </dict></plist>
          PLIST

          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/ios_archive.xcarchive" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$CM_BUILD_DIR/build"

    artifacts:
      - $CM_BUILD_DIR/build/*.ipa
      - $CM_BUILD_DIR/ios_archive.xcarchive

    publishing:
      app_store_connect:
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        submit_to_testflight: true
